{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","this","props","name","email","id","className","src","alt","Component","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","setState","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OA0BeA,E,iLAtBN,MAEqBC,KAAKC,MAAzBC,EAFD,EAECA,KAAMC,EAFP,EAEOA,MAAOC,EAFd,EAEcA,GAErB,OAIC,yBAAKC,UAAU,uDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,iBACPG,IAAI,WAEL,6BACC,4BAAKL,GACL,2BAAIC,U,GAhBUK,aCqBJC,E,iLAnBN,IAECC,EAAWV,KAAKC,MAAhBS,OACFC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CACNV,GAAIM,EAAOI,GAAGV,GACdF,KAAMQ,EAAOI,GAAGZ,KAChBC,MAAOO,EAAOI,GAAGX,MAChBY,IAAKL,EAAOI,GAAGV,QAGlB,OACC,6BACEO,O,GAdkBH,aCgBRQ,G,sLAfL,IACAC,EAAiBjB,KAAKC,MAAtBgB,aACR,OACC,yBAAKZ,UAAU,OACd,2BACCA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,S,GATST,cCSTa,E,iLARb,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEzB,KAAKC,MAAMyB,c,GAJKlB,aCqBNmB,E,YAlBd,WAAY1B,GAAO,IAAD,8BACjB,4CAAMA,KACD2B,MAAQ,CACZC,UAAU,GAHM,E,iFASjB7B,KAAK8B,SAAS,CAAED,UAAU,M,+BAI1B,OAAG7B,KAAK4B,MAAMC,SAAkB,wDACnB7B,KAAKC,MAAMyB,a,GAfElB,aCoDbuB,G,kBA/Cd,WAAY9B,GAAO,IAAD,8BACjB,4CAAMA,KAgBP+B,eAAiB,SAACC,GACjB,EAAKH,SAAS,CAACI,YAAaD,EAAME,OAAOC,SAhBzC,EAAKR,MAAQ,CACZlB,OAAQ,GACRwB,YAAa,IAJG,E,iFAUE,IAAD,OAClBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACpB,OAAQ+B,S,+BAYjH,IAAD,EACyBzC,KAAK4B,MAA7BlB,EADD,EACCA,OAAQwB,EADT,EACSA,YAEVQ,EAAiBhC,EAAOiC,QAAO,SAAAC,GACpC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASZ,EAAYW,kBAEtD,OAAInC,EAAOqC,OAKV,yBAAK1C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcjB,KAAKgC,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,OAAQgC,OATd,2C,GA/BQlC,cCIEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.1ad0f18d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n\r\n\trender(){\r\n\t\t//destructure props passed in from CardList\r\n\t\tconst { name, email, id } = this.props;\r\n\r\n\t\treturn(\r\n\t\t\t//tachyons styles for card design\r\n\t\t\t//unique robot images fetched from robohash/unique-character(s)?heightxwidth\r\n\r\n\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t\t<img src={`https://robohash.org/${id}?size=200x200`}\r\n\t\t\t\t alt='robots' />\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from './Card'\r\n\r\nclass CardList extends Component {\r\n\trender(){\r\n\t\t//creates a card element with data pulled from users API for each robot in the array \r\n\t\tconst { robots } = this.props\r\n\t\tconst cardComponent = robots.map((user, i) => {\r\n\t\t\treturn <Card \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t\t key={robots[i].id} />\r\n\t\t});\r\n\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{cardComponent}\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n}\r\nexport default CardList;","import React, { Component } from 'react';\r\nimport 'tachyons';\r\n\r\nclass SearchBox extends Component {\r\n\trender(){\r\n\t\tconst { searchChange } = this.props;\r\n\t\treturn(\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input \r\n\t\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\t\ttype='search' \r\n\t\t\t\t\tplaceholder='search robots'\r\n\t\t\t\t\tonChange={searchChange}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass Scroll extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n\t\t\t\t{this.props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\n//creates and displays error message on robofriends app\r\n//does not display thrown errors in development mode\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\t//catches errors and switches error state\r\n\tcomponentDidCatch(){\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){ return <h1>Oooops. That is not good</h1> }\r\n\t\telse{ return this.props.children }\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport 'tachyons';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//fetch call for robot users\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users => this.setState({robots: users}))\r\n\t}\r\n\r\n\r\n\t//uses arrow function instead of bind to properly point this to the constructor\r\n\t//sets searchfield state to SearchBox input\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\r\n\t\t\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { robots, searchfield } = this.state\r\n\t\t//filters robots array to display only matches to SearchBox input\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t});\r\n\t\tif(!robots.length){\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\r\n\t\treturn(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App /> ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}